{"ast":null,"code":"var _jsxFileName = \"W:\\\\devel\\\\Projects\\\\APP_WEATHER\\\\src\\\\App.js\";\nimport React, { Component, useState } from 'react';\nimport Cards from './components/Cards';\nimport Nav from './components/Nav';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst apiKey = \"e971cf7f9b0bfd0a24087a5b3c3bbaa7\";\nexport class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onSearch = function (city) {\n      fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},{state code}&appid=${apiKey}`).then(r => r.json()).then(receiver => {\n        if (receiver.main !== undefined) {\n          const city = {\n            temp_min: Math.round(receiver.main.temp_min),\n            temp_max: Math.round(receiver.main.temp_max),\n            description: receiver.weather[0].description,\n            img: receiver.weather[0].icon,\n            humidity: receiver.main.humidity,\n            weather: receiver.weather[0].main,\n            clouds: receiver.clouds.all,\n            id: receiver.id,\n            name: receiver.name\n          };\n          this.setState({\n            cities: [...this.state.cities, city]\n          }); // al estado anterior le agrego la nueva ciudad\n        } else {\n          alert(\"City not found\");\n        }\n      });\n    };\n\n    this.state = {\n      cities: []\n    };\n  }\n\n  onClose(id) {\n    this.setState({\n      cities: this.state.cities.filter(c => c.id !== id)\n    }); // elimino del estado actual la ciudad seleccionada\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Nav, {\n        onSearch: onSearch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Cards, {\n        cities: cities,\n        onClose: onClose\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["W:/devel/Projects/APP_WEATHER/src/App.js"],"names":["React","Component","useState","Cards","Nav","apiKey","App","constructor","props","onSearch","city","fetch","then","r","json","receiver","main","undefined","temp_min","Math","round","temp_max","description","weather","img","icon","humidity","clouds","all","id","name","setState","cities","state","alert","onClose","filter","c","render"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,GAAP,MAAgB,kBAAhB;AACA,OAAO,WAAP;;AAEA,MAAMC,MAAM,GAAE,kCAAd;AAEA,OAAO,MAAMC,GAAN,SAAkBL,SAAlB,CAA4B;AACjCM,EAAAA,WAAW,CAAEC,KAAF,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAMnBC,QANmB,GAMR,UAAUC,IAAV,EAAe;AACxBC,MAAAA,KAAK,CAAE,oDAAmDD,IAAK,uBAAsBL,MAAO,EAAvF,CAAL,CACGO,IADH,CACSC,CAAC,IAAIA,CAAC,CAACC,IAAF,EADd,EAEGF,IAFH,CAEUG,QAAD,IAAc;AACnB,YAAIA,QAAQ,CAACC,IAAT,KAAkBC,SAAtB,EAAgC;AAC9B,gBAAMP,IAAI,GAAG;AACXQ,YAAAA,QAAQ,EAAEC,IAAI,CAACC,KAAL,CAAWL,QAAQ,CAACC,IAAT,CAAcE,QAAzB,CADC;AAEXG,YAAAA,QAAQ,EAAEF,IAAI,CAACC,KAAL,CAAWL,QAAQ,CAACC,IAAT,CAAcK,QAAzB,CAFC;AAGXC,YAAAA,WAAW,EAACP,QAAQ,CAACQ,OAAT,CAAiB,CAAjB,EAAoBD,WAHrB;AAIXE,YAAAA,GAAG,EAACT,QAAQ,CAACQ,OAAT,CAAiB,CAAjB,EAAoBE,IAJb;AAKXC,YAAAA,QAAQ,EAACX,QAAQ,CAACC,IAAT,CAAcU,QALZ;AAMXH,YAAAA,OAAO,EAACR,QAAQ,CAACQ,OAAT,CAAiB,CAAjB,EAAoBP,IANjB;AAOXW,YAAAA,MAAM,EAACZ,QAAQ,CAACY,MAAT,CAAgBC,GAPZ;AAQXC,YAAAA,EAAE,EAACd,QAAQ,CAACc,EARD;AASXC,YAAAA,IAAI,EAACf,QAAQ,CAACe;AATH,WAAb;AAWA,eAAKC,QAAL,CAAe;AAACC,YAAAA,MAAM,EAAC,CAAC,GAAG,KAAKC,KAAL,CAAWD,MAAf,EAAuBtB,IAAvB;AAAR,WAAf,EAZ8B,CAYwB;AACvD,SAbD,MAaO;AACLwB,UAAAA,KAAK,CAAE,gBAAF,CAAL;AACD;AACF,OAnBH;AAoBD,KA3BkB;;AAEjB,SAAKD,KAAL,GAAW;AACTD,MAAAA,MAAM,EAAE;AADC,KAAX;AAGD;;AAuBDG,EAAAA,OAAO,CAAEN,EAAF,EAAM;AACX,SAAKE,QAAL,CAAc;AAACC,MAAAA,MAAM,EAAC,KAAKC,KAAL,CAAWD,MAAX,CAAkBI,MAAlB,CAAyBC,CAAC,IAAEA,CAAC,CAACR,EAAF,KAAQA,EAApC;AAAR,KAAd,EADW,CACsD;AAClE;;AACDS,EAAAA,MAAM,GAAG;AACT,wBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,8BACE,QAAC,GAAD;AAAK,QAAA,QAAQ,EAAE7B;AAAf;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,KAAD;AAAO,QAAA,MAAM,EAAEuB,MAAf;AAAuB,QAAA,OAAO,EAAEG;AAAhC;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAMD;;AAvCkC","sourcesContent":["import React, {Component, useState} from 'react'\r\nimport Cards from './components/Cards';\r\nimport Nav from './components/Nav';\r\nimport './App.css';\r\n\r\nconst apiKey= \"e971cf7f9b0bfd0a24087a5b3c3bbaa7\";\r\n\r\nexport class App extends Component {\r\n  constructor (props){\r\n    super(props)\r\n    this.state={\r\n      cities: []\r\n    };\r\n  }\r\n  onSearch = function (city){\r\n    fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},{state code}&appid=${apiKey}`)\r\n      .then (r => r.json())\r\n      .then ((receiver) => {\r\n        if (receiver.main !== undefined){\r\n          const city = {\r\n            temp_min: Math.round(receiver.main.temp_min),\r\n            temp_max: Math.round(receiver.main.temp_max),\r\n            description:receiver.weather[0].description,\r\n            img:receiver.weather[0].icon,\r\n            humidity:receiver.main.humidity,\r\n            weather:receiver.weather[0].main,\r\n            clouds:receiver.clouds.all,\r\n            id:receiver.id,\r\n            name:receiver.name\r\n          };\r\n          this.setState ({cities:[...this.state.cities, city]}) // al estado anterior le agrego la nueva ciudad\r\n        } else {\r\n          alert (\"City not found\");\r\n        }\r\n      });\r\n  }\r\n  onClose (id) {\r\n    this.setState({cities:this.state.cities.filter(c=>c.id !==id)}); // elimino del estado actual la ciudad seleccionada\r\n  }\r\n  render (){\r\n  return (\r\n    <div className=\"App\">\r\n      <Nav onSearch={onSearch}/>\r\n      <Cards cities={cities} onClose={onClose}/>\r\n    </div>\r\n  );\r\n}\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}