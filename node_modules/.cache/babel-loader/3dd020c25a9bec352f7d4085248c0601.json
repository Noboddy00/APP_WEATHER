{"ast":null,"code":"var _jsxFileName = \"W:\\\\devel\\\\Projects\\\\APP_WEATHER\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Cards from './components/Cards';\nimport Nav from './components/Nav';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst apiKey = \"e971cf7f9b0bfd0a24087a5b3c3bbaa7\";\nexport default function App() {\n  _s();\n\n  const [cities, setCities] = useState([]);\n\n  function onSearch(city) {\n    fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},{state code}&appid=${apiKey}`).then(r => r.json()).then(receiver => {\n      if (receiver.main !== undefined) {\n        const city = {\n          temp_min: Math.round(receiver.main.temp_min),\n          temp_max: Math.round(receiver.main.temp_max),\n          description: receiver.weather[0].description,\n          img: receiver.weather[0].icon,\n          humidity: receiver.main.humidity,\n          weather: receiver.weather[0].main,\n          clouds: receiver.clouds.all,\n          id: receiver.id,\n          name: receiver.name\n        };\n        setCities([...cities, city]); // al estado anterior le agrego la nueva ciudad\n      } else {\n        alert(\"City not found\");\n      }\n\n      ;\n    });\n  }\n\n  ;\n\n  function onClose(id) {\n    setCities(cities.filter(c => c.id !== id)); // elimino del estado actual la ciudad seleccionada\n  }\n\n  ;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Nav, {\n      onSearch: onSearch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Cards, {\n      cities: cities,\n      onClose: onClose\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"f1nPJs+hrTaAy6BEqAnKgJLvJt4=\");\n\n_c = App;\n;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["W:/devel/Projects/APP_WEATHER/src/App.js"],"names":["React","useState","Cards","Nav","apiKey","App","cities","setCities","onSearch","city","fetch","then","r","json","receiver","main","undefined","temp_min","Math","round","temp_max","description","weather","img","icon","humidity","clouds","all","id","name","alert","onClose","filter","c"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,GAAP,MAAgB,kBAAhB;AACA,OAAO,WAAP;;AAEA,MAAMC,MAAM,GAAG,kCAAf;AAEA,eAAe,SAASC,GAAT,GAAe;AAAA;;AAE5B,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC,EAAD,CAApC;;AAEA,WAASO,QAAT,CAAkBC,IAAlB,EAAwB;AACtBC,IAAAA,KAAK,CAAE,oDAAmDD,IAAK,uBAAsBL,MAAO,EAAvF,CAAL,CACGO,IADH,CACQC,CAAC,IAAIA,CAAC,CAACC,IAAF,EADb,EAEGF,IAFH,CAESG,QAAD,IAAc;AAClB,UAAIA,QAAQ,CAACC,IAAT,KAAkBC,SAAtB,EAAiC;AAC/B,cAAMP,IAAI,GAAG;AACXQ,UAAAA,QAAQ,EAAEC,IAAI,CAACC,KAAL,CAAWL,QAAQ,CAACC,IAAT,CAAcE,QAAzB,CADC;AAEXG,UAAAA,QAAQ,EAAEF,IAAI,CAACC,KAAL,CAAWL,QAAQ,CAACC,IAAT,CAAcK,QAAzB,CAFC;AAGXC,UAAAA,WAAW,EAAEP,QAAQ,CAACQ,OAAT,CAAiB,CAAjB,EAAoBD,WAHtB;AAIXE,UAAAA,GAAG,EAAET,QAAQ,CAACQ,OAAT,CAAiB,CAAjB,EAAoBE,IAJd;AAKXC,UAAAA,QAAQ,EAAEX,QAAQ,CAACC,IAAT,CAAcU,QALb;AAMXH,UAAAA,OAAO,EAAER,QAAQ,CAACQ,OAAT,CAAiB,CAAjB,EAAoBP,IANlB;AAOXW,UAAAA,MAAM,EAAEZ,QAAQ,CAACY,MAAT,CAAgBC,GAPb;AAQXC,UAAAA,EAAE,EAAEd,QAAQ,CAACc,EARF;AASXC,UAAAA,IAAI,EAAEf,QAAQ,CAACe;AATJ,SAAb;AAWAtB,QAAAA,SAAS,CAAC,CAAC,GAAGD,MAAJ,EAAYG,IAAZ,CAAD,CAAT,CAZ+B,CAYF;AAC9B,OAbD,MAaO;AACLqB,QAAAA,KAAK,CAAC,gBAAD,CAAL;AACD;;AAAA;AACF,KAnBH;AAoBD;;AAAA;;AAED,WAASC,OAAT,CAAiBH,EAAjB,EAAqB;AACnBrB,IAAAA,SAAS,CAACD,MAAM,CAAC0B,MAAP,CAAcC,CAAC,IAAIA,CAAC,CAACL,EAAF,KAASA,EAA5B,CAAD,CAAT,CADmB,CACyB;AAC7C;;AAAA;AAED,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE,QAAC,GAAD;AAAK,MAAA,QAAQ,EAAEpB;AAAf;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,KAAD;AAAO,MAAA,MAAM,EAAEF,MAAf;AAAuB,MAAA,OAAO,EAAEyB;AAAhC;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD;;GArCuB1B,G;;KAAAA,G;AAqCvB","sourcesContent":["import React, { useState } from 'react'\r\nimport Cards from './components/Cards';\r\nimport Nav from './components/Nav';\r\nimport './App.css';\r\n\r\nconst apiKey = \"e971cf7f9b0bfd0a24087a5b3c3bbaa7\";\r\n\r\nexport default function App() {\r\n\r\n  const [cities, setCities] = useState([]);\r\n\r\n  function onSearch(city) {\r\n    fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},{state code}&appid=${apiKey}`)\r\n      .then(r => r.json())\r\n      .then((receiver) => {\r\n        if (receiver.main !== undefined) {\r\n          const city = {\r\n            temp_min: Math.round(receiver.main.temp_min),\r\n            temp_max: Math.round(receiver.main.temp_max),\r\n            description: receiver.weather[0].description,\r\n            img: receiver.weather[0].icon,\r\n            humidity: receiver.main.humidity,\r\n            weather: receiver.weather[0].main,\r\n            clouds: receiver.clouds.all,\r\n            id: receiver.id,\r\n            name: receiver.name\r\n          };\r\n          setCities([...cities, city]) // al estado anterior le agrego la nueva ciudad\r\n        } else {\r\n          alert(\"City not found\");\r\n        };\r\n      });\r\n  };\r\n\r\n  function onClose(id) {\r\n    setCities(cities.filter(c => c.id !== id)); // elimino del estado actual la ciudad seleccionada\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Nav onSearch={onSearch} />\r\n      <Cards cities={cities} onClose={onClose} />\r\n    </div>\r\n  );\r\n};\r\n\r\n"]},"metadata":{},"sourceType":"module"}