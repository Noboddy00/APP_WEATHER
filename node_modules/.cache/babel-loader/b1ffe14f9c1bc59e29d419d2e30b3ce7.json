{"ast":null,"code":"var _jsxFileName = \"D:\\\\proyects\\\\app_weather\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst apiKey = \"e971cf7f9b0bfd0a24087a5b3c3bbaa7\";\n\nfunction App() {\n  _s();\n\n  const [cities, setCities] = useState([]);\n\n  function onSearch(city) {\n    fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},{state code}&appid=${apiKey}`).then(r => r.json()).then(receiver => {\n      if (receiver.main !== undefined) {\n        const city = {\n          temp_min: Math.round(receiver.main.temp_min),\n          temp_max: Math.round(receiver.main.temp_max),\n          description: receiver.weather[0].description,\n          img: receiver.weather[0].icon,\n          humidity: receiver.main.humidity,\n          weather: receiver.weather[0].main,\n          clouds: receiver.clouds.all,\n          id: receiver.id,\n          name: receiver.name\n        };\n        setCities(oldCities => [...oldCities, city]); // al estado anterior le agrego la nueva ciudad\n      } else {\n        alert(\"City not found\");\n      }\n    });\n  }\n\n  function onClose(id) {\n    setCities(oldCities => oldCities.filter(c => c.id !== id)); // elimino del estado actual la ciudad seleccionada\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: \"My app weather\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"gDRFGyRV/hr45JphCIE9HtRRX1E=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["D:/proyects/app_weather/src/App.js"],"names":["React","useState","apiKey","App","cities","setCities","onSearch","city","fetch","then","r","json","receiver","main","undefined","temp_min","Math","round","temp_max","description","weather","img","icon","humidity","clouds","all","id","name","oldCities","alert","onClose","filter","c"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAO,WAAP;;AAEA,MAAMC,MAAM,GAAE,kCAAd;;AAEA,SAASC,GAAT,GAAe;AAAA;;AAEb,QAAM,CAACC,MAAD,EAAQC,SAAR,IAAqBJ,QAAQ,CAAC,EAAD,CAAnC;;AAEA,WAASK,QAAT,CAAmBC,IAAnB,EAAwB;AACtBC,IAAAA,KAAK,CAAE,oDAAmDD,IAAK,uBAAsBL,MAAO,EAAvF,CAAL,CACGO,IADH,CACSC,CAAC,IAAIA,CAAC,CAACC,IAAF,EADd,EAEGF,IAFH,CAEUG,QAAD,IAAc;AACnB,UAAIA,QAAQ,CAACC,IAAT,KAAkBC,SAAtB,EAAgC;AAC9B,cAAMP,IAAI,GAAG;AACXQ,UAAAA,QAAQ,EAAEC,IAAI,CAACC,KAAL,CAAWL,QAAQ,CAACC,IAAT,CAAcE,QAAzB,CADC;AAEXG,UAAAA,QAAQ,EAAEF,IAAI,CAACC,KAAL,CAAWL,QAAQ,CAACC,IAAT,CAAcK,QAAzB,CAFC;AAGXC,UAAAA,WAAW,EAACP,QAAQ,CAACQ,OAAT,CAAiB,CAAjB,EAAoBD,WAHrB;AAIXE,UAAAA,GAAG,EAACT,QAAQ,CAACQ,OAAT,CAAiB,CAAjB,EAAoBE,IAJb;AAKXC,UAAAA,QAAQ,EAACX,QAAQ,CAACC,IAAT,CAAcU,QALZ;AAMXH,UAAAA,OAAO,EAACR,QAAQ,CAACQ,OAAT,CAAiB,CAAjB,EAAoBP,IANjB;AAOXW,UAAAA,MAAM,EAACZ,QAAQ,CAACY,MAAT,CAAgBC,GAPZ;AAQXC,UAAAA,EAAE,EAACd,QAAQ,CAACc,EARD;AASXC,UAAAA,IAAI,EAACf,QAAQ,CAACe;AATH,SAAb;AAWAtB,QAAAA,SAAS,CAACuB,SAAS,IAAI,CAAC,GAAGA,SAAJ,EAAerB,IAAf,CAAd,CAAT,CAZ8B,CAYe;AAC9C,OAbD,MAaO;AACLsB,QAAAA,KAAK,CAAE,gBAAF,CAAL;AACD;AACF,KAnBH;AAoBD;;AAED,WAASC,OAAT,CAAkBJ,EAAlB,EAAsB;AACpBrB,IAAAA,SAAS,CAAEuB,SAAS,IAAIA,SAAS,CAACG,MAAV,CAAiBC,CAAC,IAAEA,CAAC,CAACN,EAAF,KAAQA,EAA5B,CAAf,CAAT,CADoB,CACsC;AAC3D;;AAED,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;GApCQvB,G;;KAAAA,G;AAsCT,eAAeA,GAAf","sourcesContent":["import React, {useState} from 'react'\nimport './App.css';\n\nconst apiKey= \"e971cf7f9b0bfd0a24087a5b3c3bbaa7\";\n\nfunction App() {\n\n  const [cities,setCities] = useState([]);\n\n  function onSearch (city){\n    fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},{state code}&appid=${apiKey}`)\n      .then (r => r.json())\n      .then ((receiver) => {\n        if (receiver.main !== undefined){\n          const city = {\n            temp_min: Math.round(receiver.main.temp_min),\n            temp_max: Math.round(receiver.main.temp_max),\n            description:receiver.weather[0].description,\n            img:receiver.weather[0].icon,\n            humidity:receiver.main.humidity,\n            weather:receiver.weather[0].main,\n            clouds:receiver.clouds.all,\n            id:receiver.id,\n            name:receiver.name\n          };\n          setCities(oldCities => [...oldCities, city]) // al estado anterior le agrego la nueva ciudad\n        } else {\n          alert (\"City not found\");\n        }\n      });\n  }\n\n  function onClose (id) {\n    setCities (oldCities => oldCities.filter(c=>c.id !==id)); // elimino del estado actual la ciudad seleccionada\n  }\n\n  return (\n    <div className=\"App\">\n      My app weather\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}