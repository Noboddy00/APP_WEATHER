{"ast":null,"code":"var _jsxFileName = \"W:\\\\devel\\\\Projects\\\\APP_WEATHER\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport Cards from './components/Cards';\nimport Nav from './components/Nav';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst apiKey = \"e971cf7f9b0bfd0a24087a5b3c3bbaa7\";\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cities: []\n    };\n    this.onSearch = this.onSearch.bind(this);\n    this.onClose = this.onClose.bind(this);\n  }\n\n  onSearch(city) {\n    fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},{state code}&appid=${apiKey}`).then(r => r.json()).then(receiver => {\n      if (receiver.main !== undefined) {\n        const city = {\n          temp_min: Math.round(receiver.main.temp_min),\n          temp_max: Math.round(receiver.main.temp_max),\n          description: receiver.weather[0].description,\n          img: receiver.weather[0].icon,\n          humidity: receiver.main.humidity,\n          weather: receiver.weather[0].main,\n          clouds: receiver.clouds.all,\n          id: receiver.id,\n          name: receiver.name\n        };\n        this.setState([...this.cities, city]); // al estado anterior le agrego la nueva ciudad\n      } else {\n        alert(\"City not found\");\n      }\n    });\n  }\n\n  onClose(id) {\n    this.setState({\n      cities: this.cities.filter(c => c.id !== id)\n    }); // elimino del estado actual la ciudad seleccionada\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Nav, {\n        onSearch: this.onSearch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Cards, {\n        cities: this.cities,\n        onClose: this.onClose\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["W:/devel/Projects/APP_WEATHER/src/App.js"],"names":["React","Component","Cards","Nav","apiKey","App","constructor","props","state","cities","onSearch","bind","onClose","city","fetch","then","r","json","receiver","main","undefined","temp_min","Math","round","temp_max","description","weather","img","icon","humidity","clouds","all","id","name","setState","alert","filter","c","render"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,GAAP,MAAgB,kBAAhB;AACA,OAAO,WAAP;;AAEA,MAAMC,MAAM,GAAE,kCAAd;AAEA,eAAe,MAAMC,GAAN,SAAkBJ,SAAlB,CAA4B;AACzCK,EAAAA,WAAW,CAAEC,KAAF,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAW;AACTC,MAAAA,MAAM,EAAE;AADC,KAAX;AAGA,SAAKC,QAAL,GAAc,KAAKA,QAAL,CAAcC,IAAd,CAAmB,IAAnB,CAAd;AACA,SAAKC,OAAL,GAAa,KAAKA,OAAL,CAAaD,IAAb,CAAkB,IAAlB,CAAb;AACD;;AACDD,EAAAA,QAAQ,CAAEG,IAAF,EAAO;AACbC,IAAAA,KAAK,CAAE,oDAAmDD,IAAK,uBAAsBT,MAAO,EAAvF,CAAL,CACGW,IADH,CACSC,CAAC,IAAIA,CAAC,CAACC,IAAF,EADd,EAEGF,IAFH,CAEUG,QAAD,IAAc;AACnB,UAAIA,QAAQ,CAACC,IAAT,KAAkBC,SAAtB,EAAgC;AAC9B,cAAMP,IAAI,GAAG;AACXQ,UAAAA,QAAQ,EAAEC,IAAI,CAACC,KAAL,CAAWL,QAAQ,CAACC,IAAT,CAAcE,QAAzB,CADC;AAEXG,UAAAA,QAAQ,EAAEF,IAAI,CAACC,KAAL,CAAWL,QAAQ,CAACC,IAAT,CAAcK,QAAzB,CAFC;AAGXC,UAAAA,WAAW,EAACP,QAAQ,CAACQ,OAAT,CAAiB,CAAjB,EAAoBD,WAHrB;AAIXE,UAAAA,GAAG,EAACT,QAAQ,CAACQ,OAAT,CAAiB,CAAjB,EAAoBE,IAJb;AAKXC,UAAAA,QAAQ,EAACX,QAAQ,CAACC,IAAT,CAAcU,QALZ;AAMXH,UAAAA,OAAO,EAACR,QAAQ,CAACQ,OAAT,CAAiB,CAAjB,EAAoBP,IANjB;AAOXW,UAAAA,MAAM,EAACZ,QAAQ,CAACY,MAAT,CAAgBC,GAPZ;AAQXC,UAAAA,EAAE,EAACd,QAAQ,CAACc,EARD;AASXC,UAAAA,IAAI,EAACf,QAAQ,CAACe;AATH,SAAb;AAWA,aAAKC,QAAL,CAAe,CAAC,GAAG,KAAKzB,MAAT,EAAgBI,IAAhB,CAAf,EAZ8B,CAYQ;AACvC,OAbD,MAaO;AACLsB,QAAAA,KAAK,CAAE,gBAAF,CAAL;AACD;AACF,KAnBH;AAoBD;;AACDvB,EAAAA,OAAO,CAAEoB,EAAF,EAAM;AACX,SAAKE,QAAL,CAAc;AACZzB,MAAAA,MAAM,EAAE,KAAKA,MAAL,CAAY2B,MAAZ,CAAmBC,CAAC,IAAEA,CAAC,CAACL,EAAF,KAAQA,EAA9B;AADI,KAAd,EADW,CAGP;AACL;;AACDM,EAAAA,MAAM,GAAG;AACT,wBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,8BACE,QAAC,GAAD;AAAK,QAAA,QAAQ,EAAE,KAAK5B;AAApB;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,KAAD;AAAO,QAAA,MAAM,EAAE,KAAKD,MAApB;AAA4B,QAAA,OAAO,EAAE,KAAKG;AAA1C;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAMD;;AA3C0C","sourcesContent":["import React, {Component} from 'react'\r\nimport Cards from './components/Cards';\r\nimport Nav from './components/Nav';\r\nimport './App.css';\r\n\r\nconst apiKey= \"e971cf7f9b0bfd0a24087a5b3c3bbaa7\";\r\n\r\nexport default class App extends Component {\r\n  constructor (props){\r\n    super(props)\r\n    this.state={\r\n      cities: []\r\n    };\r\n    this.onSearch=this.onSearch.bind(this);\r\n    this.onClose=this.onClose.bind(this);\r\n  }\r\n  onSearch (city){\r\n    fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},{state code}&appid=${apiKey}`)\r\n      .then (r => r.json())\r\n      .then ((receiver) => {\r\n        if (receiver.main !== undefined){\r\n          const city = {\r\n            temp_min: Math.round(receiver.main.temp_min),\r\n            temp_max: Math.round(receiver.main.temp_max),\r\n            description:receiver.weather[0].description,\r\n            img:receiver.weather[0].icon,\r\n            humidity:receiver.main.humidity,\r\n            weather:receiver.weather[0].main,\r\n            clouds:receiver.clouds.all,\r\n            id:receiver.id,\r\n            name:receiver.name\r\n          };\r\n          this.setState ([...this.cities,city]) // al estado anterior le agrego la nueva ciudad\r\n        } else {\r\n          alert (\"City not found\");\r\n        }\r\n      });\r\n  }\r\n  onClose (id) {\r\n    this.setState({\r\n      cities: this.cities.filter(c=>c.id !==id)\r\n    }); // elimino del estado actual la ciudad seleccionada\r\n  }\r\n  render (){\r\n  return (\r\n    <div className=\"App\">\r\n      <Nav onSearch={this.onSearch}/>\r\n      <Cards cities={this.cities} onClose={this.onClose}/>\r\n    </div>\r\n  );\r\n}\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}